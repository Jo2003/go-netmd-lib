package netmd

import (
	"crypto/cipher"
	"crypto/des"
	"math/rand"
)

type EKB struct {
	Id        []byte
	Depth     int
	Signature []byte
	Chain     []byte
	Root      []byte
	hostNonce []byte
	IV        []byte
	ContentId []byte
	Kek       []byte
	DataKey   []byte
	FirstIV   []byte
}

func NewEKB() (e *EKB) {
	e = &EKB{
		Id:        []byte{0x26, 0x42, 0x26, 0x42},
		Chain:     []byte{0x25, 0x45, 0x06, 0x4d, 0xea, 0xca, 0x14, 0xf9, 0x96, 0xbd, 0xc8, 0xa4, 0x06, 0xc2, 0x2b, 0x81, 0x49, 0xba, 0xf0, 0xdf, 0x26, 0x9d, 0xb7, 0x1d, 0x49, 0xba, 0xf0, 0xdf, 0x26, 0x9d, 0xb7, 0x1d},
		Depth:     9,
		Signature: []byte{0xe8, 0xef, 0x73, 0x45, 0x8d, 0x5b, 0x8b, 0xf8, 0xe8, 0xef, 0x73, 0x45, 0x8d, 0x5b, 0x8b, 0xf8, 0x38, 0x5b, 0x49, 0x36, 0x7b, 0x42, 0x0c, 0x58},
		Root:      []byte{0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37},
		IV:        []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ContentId: []byte{0x01, 0x0F, 0x50, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0xA2, 0x8D, 0x3E, 0x1A, 0x3B, 0x0C, 0x44, 0xAF, 0x2f, 0xa0},
		Kek:       []byte{0x14, 0xe3, 0x83, 0x4e, 0xe2, 0xd3, 0xcc, 0xa5},
		FirstIV:   []byte{0x08, 0xd9, 0xcb, 0xd4, 0xc1, 0x5e, 0xc0, 0xff},
	}
	return
}

func (ekb *EKB) CreateKey() ([]byte, error) {
	key := make([]byte, 8)
	for i := 0; i < 8; i++ {
		key[i] = byte(rand.Int()) & 0xff
	}
	o, err := DESDecrypt(key, ekb.Kek)
	if err != nil {
		return nil, err
	}
	return o, nil
}

func (ekb *EKB) Key16to24() []byte {
	var b []byte
	b = append(b, ekb.Root[:16]...)
	b = append(b, ekb.Root[:8]...)
	return b
}

func (ekb *EKB) RetailMAC(nonce *Nonce) ([]byte, error) {
	subKey := ekb.Root[0:8]
	blk, err := des.NewCipher(subKey)
	if err != nil {
		return nil, err
	}
	blkMode := cipher.NewCBCEncrypter(blk, ekb.IV)
	iv2 := make([]byte, len(nonce.Host))
	blkMode.CryptBlocks(iv2, nonce.Host)

	blk, err = des.NewTripleDESCipher(ekb.Key16to24())
	if err != nil {
		return nil, err
	}
	blkMode = cipher.NewCBCEncrypter(blk, iv2)
	crypted := make([]byte, len(nonce.Dev))
	blkMode.CryptBlocks(crypted, nonce.Dev)

	return crypted, nil
}
